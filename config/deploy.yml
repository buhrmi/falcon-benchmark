# Name of your application. Used to uniquely configure containers.
service: myapp

# Name of the container image.
image: my_docker_username/myapp

# Deploy to these servers.
servers:
  web:
    hosts:
      - 123.123.123.123
    options:
      network: "private"
      
    labels:
      traefik.http.routers.myapp.entrypoints: websecure
      traefik.http.routers.myapp.rule: (Host(`www.myapp.com`) || Host(`myapp.com`))
      traefik.http.routers.myapp.tls.certresolver: letsencrypt
      traefik.http.routers.myapp.middlewares: add-www-myapp
      traefik.http.middlewares.add-www-myapp.redirectregex.regex: ^https://myapp.com/(.*)
      traefik.http.middlewares.add-www-myapp.redirectregex.replacement: https://www.myapp.com/$1


volumes:
  - "/storage:/rails/storage"

builder:
  multiarch: false

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: my_docker_username

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_TOKEN

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    HOSTNAME: www.myapp.com
    DB_HOST: 123.123.123.123
    RAILS_LOG_TO_STDOUT: 1
    RAILS_SERVE_STATIC_FILES: 1
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:15
    host: 195.201.36.212
    port: 5432
    env:
      clear:
        POSTGRES_USER: 'myapp'
        POSTGRES_DB: 'myapp_production'
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data
  redis:
    image: redis:latest
    roles:
      - web
      # - job
    cmd: "redis-server --requirepass <%= ENV['REDIS_PASSWORD'] %>"
    volumes:
      - /var/lib/redis:/data
    options:
      network: "private"

# Configure custom arguments for Traefik
traefik:
  options:
    publish:
      - "443:443/tcp"
      - "443:443/udp"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
    network: "private"
  args:
    entryPoints.web.address: ":80"
    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    entryPoints.websecure.address: ":443"
    entryPoints.websecure.http3:
    certificatesResolvers.letsencrypt.acme.email: "my@email.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web
    experimental.http3: true
    

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/vite

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2
